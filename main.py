import os
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env")
    exit()

total_numbers = 60
free_numbers = set()
used_numbers = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤.\n"
        "/total 60 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—É–º–æ–ª—á–∞–Ω–∏–µ 60)\n"
        "/free ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞\n"
        "/random ‚Äî –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä\n"
        "/restart ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å"
    )

async def set_total(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global total_numbers, used_numbers, free_numbers
    try:
        total_numbers = int(context.args[0])
        used_numbers.clear()
        free_numbers.clear()
        await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_numbers}")
    except:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /total 65")

async def set_free(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global free_numbers
    try:
        nums = {int(n) for n in context.args}
        free_numbers = nums
        await update.message.reply_text(f"üÜì –°–≤–æ–±–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {sorted(free_numbers)}")
    except:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /free 5 10 15")

async def pick_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global total_numbers, free_numbers, used_numbers
    all_numbers = set(range(1, total_numbers + 1))
    available = all_numbers - free_numbers - used_numbers
    if not available:
        await update.message.reply_text("‚ùå –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
        return
    choice = random.choice(list(available))
    used_numbers.add(choice)
    await update.message.reply_text(f"üé≤ –í—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä: {choice}")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global total_numbers, free_numbers, used_numbers
    total_numbers = 60
    free_numbers.clear()
    used_numbers.clear()
    await update.message.reply_text("üîÑ –í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ.")

app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("total", set_total))
app.add_handler(CommandHandler("free", set_free))
app.add_handler(CommandHandler("random", pick_random))
app.add_handler(CommandHandler("restart", restart))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
app.run_polling()
